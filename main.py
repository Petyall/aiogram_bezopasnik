import logging
from aiogram import Bot, Dispatcher, executor, types
import vt
import validators
import os
import re
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import hashlib
from screensaver import get_screenshot
from settings import api_key, token
from urldecoding import urldecoding
from qrreader import qrreader
from passwordvalidator import is_strong_password

# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–û–¢–£ –ß–ï–†–ï–ó AIOGRAM
API_TOKEN = token
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
download_path=("C:\\Users\\Petyal\\Desktop\\bez0pasnik\\aiogram_bezopasnik")
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö VIRUSTOTAL API 
client = vt.Client(api_key)

# –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î /start –∏ /help
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} ‚úã!\n–Ø - –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–∏–∫ ü¶æ\n–ú–µ–Ω—è –Ω–∞–¥–µ–ª–∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—É—Å–æ–≤, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏ QR –∫–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —Å—Ç–æ–π–∫–æ—Å—Ç—å –∫ –≤–∑–ª–æ–º—É.\n–ï—Å–ª–∏ —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –æ—Ç–∫—Ä—ã–≤–∞–π –º–µ–Ω—é –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ ‚ò∫Ô∏è")


class ScreenForm(StatesGroup):
    url = State()

@dp.message_handler(commands='screen')
async def cmd_screen(message: types.Message):
    await ScreenForm.url.set()
    await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É")

@dp.message_handler(state=ScreenForm.url)
async def process_screen(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –°–°–´–õ–ö–ò –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        if validators.url(data['url']):
            # –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ö–†–ò–ù–®–û–¢–ê
            await get_screenshot(data['url'], message.from_user.username)
            # –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ü–û–ò–°–ö–ê –°–ö–†–ò–ù–®–û–¢–ê
            try:
                # –û–¢–ö–†–´–¢–ò–ï –°–ö–†–ò–ù–®–û–¢–ê, –°–û–ó–î–ê–ù–ù–û–ì–û –§–£–ù–ö–¶–ò–ï–ô
                with open(f'{message.from_user.username}.png', 'rb') as photo:
                    # –û–¢–ü–†–ê–í–ö–ê –°–ö–†–ò–ù–®–û–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
                    await message.reply_photo(photo, caption='Screenshot')
                    # –£–î–ê–õ–ï–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–ê –ò–ó –ü–ê–ú–Ø–¢–ò
                    os.remove(f'{message.from_user.username}.png')
            # –ï–°–õ–ò –°–ö–†–ò–ù–®–û–¢ –ù–ï –ë–´–õ –°–û–ó–î–ê–ù, –í–´–í–ï–î–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï
            except:
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @petyal :(")
        # –ï–°–õ–ò –°–°–´–õ–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï –ü–†–û–ô–î–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–Æ, –í–´–í–ï–î–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï
        else:
            await message.reply("‚ùå–°—Å—ã–ª–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞‚ùå\n–ü—Ä–∏–º–µ—Ä: \n/decoding https://www.SOMETHING.com")

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.finish()


class URLScanForm(StatesGroup):
    url = State()

@dp.message_handler(commands='urlscan')
async def cmd_urlscan(message: types.Message):
    await URLScanForm.url.set()
    await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É")

@dp.message_handler(state=URLScanForm.url)
async def process_urlscan(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
        if re.match(r'^https://', data['url']):
            https_validate = ''
        else:
            https_validate = "‚ùå–û—Å—Ç–æ—Ä–æ–∂–Ω–æ‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ https!"
        if validators.url(data['url']):
            # –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –ü–†–û–í–ï–†–ö–ò –°–°–´–õ–ö–ò
            try:
                # –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –ù–ê–õ–ò–ß–ò–ï –í–ò–†–£–°–û–í –§–£–ù–ö–¶–ò–ï–ô VIRUSTOTAL
                analysis = await vt.Client.scan_url_async(self=client, url=data['url'], wait_for_completion=True)
                # –í–ó–Ø–¢–ò–ï –ò–ó –°–õ–û–í–ê–†–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø
                info = analysis.get('stats')
                # –õ–û–ì–ò–ö–ê –î–õ–Ø –í–´–í–û–î–ê –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
                result = f'–°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω!\n{info["malicious"]} –∏–∑ 90 –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤ –ø–æ—Å—á–∏—Ç–∞–ª–∏ —ç—Ç–æ—Ç —Å–∞–π—Ç –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω—ã–º :(' if info['malicious'] else '–°–∞–π—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω'
                # –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò
                await message.reply(f'{result}\n{https_validate}')
            # –ï–°–õ–ò –°–°–´–õ–ö–ê –ù–ï –ü–†–û–®–õ–ê –ü–†–û–í–ï–†–ö–£, –í–´–í–ï–î–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï
            except:
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @petyal :(")
        # –ï–°–õ–ò –°–°–´–õ–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï –ü–†–û–ô–î–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–Æ, –í–´–í–ï–î–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï
        else:
            await message.reply("‚ùå–°—Å—ã–ª–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞‚ùå\n–ü—Ä–∏–º–µ—Ä: \n/decoding https://www.SOMETHING.com")

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.finish()


class URLDecodeForm(StatesGroup):
    url = State()

@dp.message_handler(commands='decoding')
async def cmd_decoding(message: types.Message):
    await URLDecodeForm.url.set()
    await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É")

@dp.message_handler(state=URLDecodeForm.url)
async def process_decoding(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = message.text
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –°–°–´–õ–ö–ò –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        if validators.url(data['url']):
            # –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –†–ê–°–®–ò–§–†–û–í–ö–ò –°–°–´–õ–ö–ò
            context = await urldecoding(data['url'])
            # –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ê–°–®–ò–§–†–û–í–ö–ò
            await message.reply(context)
        # –ï–°–õ–ò –°–°–´–õ–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï –ü–†–û–ô–î–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–Æ, –í–´–í–ï–î–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï
        else:
            await message.reply("‚ùå–°—Å—ã–ª–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞‚ùå\n–ü—Ä–∏–º–µ—Ä: \n/decoding https://www.SOMETHING.com")

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.finish()


# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–®–ò–§–†–û–í–ö–ò QR 
@dp.message_handler(content_types=['photo'])
async def save_photo(message: types.Message):
    # –ü–û–õ–£–ß–ï–ù–ò–ï –§–û–¢–û–ì–†–ê–§–ò–ò
    photo = message.photo[-1]
    # –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ú–ï–ù–ò –î–õ–Ø –§–û–¢–û
    file_name = f"{photo.file_id}.jpg"
    # –°–û–ó–î–ê–ù–ò–ï –ü–ê–ü–ö–ò –ù–ê –°–ï–†–í–ï–†–ï
    if not os.path.exists("photos"):
        os.makedirs("photos")
    # –ü–£–¢–¨ –î–û –§–ê–ô–õ–ê –ò –ï–ì–û –ù–ê–ó–í–ê–ù–ò–ï
    file_path = os.path.join("photos", file_name)
    # –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –†–ê–°–®–ò–§–†–û–í–ö–ò QR
    await photo.download(file_path)
    # –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ê–°–®–ò–§–†–û–í–ö–ò
    await message.reply(await qrreader(file_path))



class PasswordForm(StatesGroup):
    password = State()

@dp.message_handler(commands='password')
async def cmd_password(message: types.Message):
    await PasswordForm.password.set()
    await message.reply("–ü—Ä–∏—à–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

@dp.message_handler(state=PasswordForm.password)
async def process_password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password'] = message.text
        # –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø –ò –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        await bot.send_message(message.chat.id, await is_strong_password(data['password']))
        # –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø, –°–û–î–ï–†–ñ–ê–©–ï–ì–û –ü–ê–†–û–õ–¨
        await bot.delete_message(message.chat.id, message.message_id)

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.finish()




@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def doc_handler(message: types.Message):
    if document := message.document:
        await document.download(destination_file=document['file_name'])

        file_path = f'C:\\Users\\Petyal\\Desktop\\bez0pasnik\\{document["file_name"]}'

        await bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')
        with open(file_path, "rb") as f:
            print('–ù–∞—á–∞–ª–æ—Å—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
            analysis = await client.scan_file_async(f, wait_for_completion=True)
            print('—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å')

        with open(document["file_name"], 'rb') as f:
            file_bytes = f.read()
            file_hash = hashlib.md5(file_bytes).hexdigest()
            print(file_hash)

        report = await client.get_object_async(f'/files/{file_hash}')

        if report.get(attr_name='malicious'):
            await message.reply("–ï—Å—Ç—å –≤–∏—Ä—É—Å")
        else:
            await message.reply("–ë–µ–∑–≤—Ä–µ–¥–Ω–æ")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)